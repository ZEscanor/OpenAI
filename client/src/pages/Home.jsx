import React, {useState, useEffect} from 'react';

import {Loader, Card, FormField} from '../components/index';


const RenderCards = ({data,title}) => {
if(data?.length > 0 ){
  return data.map((post) => 
  <Card key={post._id} 
  {...post}/>)
}
else{
 return (
  <h2 className='mt-5 font-bold text-[#6449ff] text-xl uppercase'>
      {title}
  </h2>
 )
}
}



const Home = () => {
  const [loading,setLoading] = useState(false);
  const [allPosts,setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState("");
  const [searched, setSearched] = useState(null);
  const [searchTimeout, setSearchTimeout ] = useState(null)

  const fetchPosts = async () =>{
    setLoading(true)
    try {
      const response = await fetch("https://openai-dalle.onrender.com/api/v1/post",{
        method: "GET",
        headers: {
          'Content-Type': 'application/json',
        },
      });
      if(response.ok){
        const result = await response.json();

        setAllPosts(result.data.reverse());
      }
    } catch (error) {
      alert(error)
    }
    finally {
      setLoading(false)
    }
  };
  useEffect(() => {
   fetchPosts()
  }, [])

  const handleSearch = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);
    setSearchTimeout(
    setTimeout(()=>{
      const searchResults = allPosts.filter((item)=> item.name.toLowerCase().includes(searchText.toLowerCase()) || 
      item.prompt.toLowerCase().includes(searchText.toLowerCase()));
      setSearched(searchResults)
    }, 500)
    );
  }
  
  return (
   <section className='max-w-7xl mx-auto' >
    <div>
      <h1 className='font-extrabold text-[#222328] text-[32px]'> 
        Community Showcase
        <p className='mt-2 text-[#666e75] text-[16px] max-w-[500px]'>
           Browse through awesome images generated by DALL-E AI
        </p>
      </h1>
    </div>
    <div className='mt-16'>
    <FormField 
     labelName="Search Posts"
     type="text"
     name="text"
     placeholder='Search'
     value = {searchText}
     handleChange = {handleSearch}
    />
    </div>

    <div className='mt-10'>
         {loading ? (
          <div className='flex justify-center items-center'>
            <Loader/>
            </div>
         ) : 
         <>
          {searchText && (
            <h3 className='font-medium text-[#666e75] text-xl mb-3'>
               Showing Results for <span className='text-[#222338]'>
                       {searchText}
               </span>
            </h3>
          )}
          <div className='grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap 3'>
               {searchText ? (
                <RenderCards data={searched}
                             title="No Search Results Found" />
               ) : (
              
               <RenderCards
                 data={allPosts}
                title="No Posts found"
        
               />)
               }
          </div>
         </>
        }
    </div>
   </section>
  )
}

export default Home
